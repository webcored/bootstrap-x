/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AdditionalVariants, Sizes, Variants } from "./shared/bootstrap.dto";
import { Breadcrumb } from "./components/bx-breadcrumb/bx-breadcrumb.dto";
import { Divider, DropdownItem, DropType } from "./components/bx-dropdown/bx-dropdown.dto";
export namespace Components {
    interface BxAlert {
        "alert": () => Promise<boolean>;
        "close": () => Promise<void>;
        "dismissible": boolean;
        "dispose": () => Promise<void>;
        "text"?: string;
        "variant": Variants;
    }
    interface BxBadge {
        "link"?: string;
        "pill": boolean;
        "target"?: string;
        "text"?: string;
        "variant": Variants;
    }
    interface BxBreadcrumb {
        "active": (text: String) => Promise<void>;
        "add": (breadcrumb: Breadcrumb) => Promise<void>;
        "breadcrumbs"?: Breadcrumb[] | string;
        "delete": (text: String) => Promise<void>;
        "dispose": () => Promise<void>;
        "separator": string;
    }
    interface BxButton {
        "active": boolean;
        "block": boolean;
        "disabled": boolean;
        "dispose": () => Promise<void>;
        "link"?: string;
        "outline": boolean;
        "size": Sizes;
        "target"?: string;
        "text": string;
        "toggle": () => Promise<void>;
        "variant": AdditionalVariants | Variants;
    }
    interface BxContainer {
    }
    interface BxDropdown {
        "buttonText": string;
        "direction": DropType;
        "dispose": () => Promise<void>;
        "isLink": boolean;
        "items"?: (DropdownItem | Divider)[] | string;
        "size": Sizes;
        "split": boolean;
        "textVariant": Variants;
        "toggle": () => Promise<void>;
        "variant": Variants;
    }
    interface BxSpinner {
        "dispose": () => Promise<void>;
        "grow": boolean;
        "small": boolean;
        "variant": Variants;
    }
}
declare global {
    interface HTMLBxAlertElement extends Components.BxAlert, HTMLStencilElement {
    }
    var HTMLBxAlertElement: {
        prototype: HTMLBxAlertElement;
        new (): HTMLBxAlertElement;
    };
    interface HTMLBxBadgeElement extends Components.BxBadge, HTMLStencilElement {
    }
    var HTMLBxBadgeElement: {
        prototype: HTMLBxBadgeElement;
        new (): HTMLBxBadgeElement;
    };
    interface HTMLBxBreadcrumbElement extends Components.BxBreadcrumb, HTMLStencilElement {
    }
    var HTMLBxBreadcrumbElement: {
        prototype: HTMLBxBreadcrumbElement;
        new (): HTMLBxBreadcrumbElement;
    };
    interface HTMLBxButtonElement extends Components.BxButton, HTMLStencilElement {
    }
    var HTMLBxButtonElement: {
        prototype: HTMLBxButtonElement;
        new (): HTMLBxButtonElement;
    };
    interface HTMLBxContainerElement extends Components.BxContainer, HTMLStencilElement {
    }
    var HTMLBxContainerElement: {
        prototype: HTMLBxContainerElement;
        new (): HTMLBxContainerElement;
    };
    interface HTMLBxDropdownElement extends Components.BxDropdown, HTMLStencilElement {
    }
    var HTMLBxDropdownElement: {
        prototype: HTMLBxDropdownElement;
        new (): HTMLBxDropdownElement;
    };
    interface HTMLBxSpinnerElement extends Components.BxSpinner, HTMLStencilElement {
    }
    var HTMLBxSpinnerElement: {
        prototype: HTMLBxSpinnerElement;
        new (): HTMLBxSpinnerElement;
    };
    interface HTMLElementTagNameMap {
        "bx-alert": HTMLBxAlertElement;
        "bx-badge": HTMLBxBadgeElement;
        "bx-breadcrumb": HTMLBxBreadcrumbElement;
        "bx-button": HTMLBxButtonElement;
        "bx-container": HTMLBxContainerElement;
        "bx-dropdown": HTMLBxDropdownElement;
        "bx-spinner": HTMLBxSpinnerElement;
    }
}
declare namespace LocalJSX {
    interface BxAlert {
        "dismissible"?: boolean;
        "onClosed"?: (event: CustomEvent<void>) => void;
        "onClosing"?: (event: CustomEvent<void>) => void;
        "text"?: string;
        "variant"?: Variants;
    }
    interface BxBadge {
        "link"?: string;
        "pill"?: boolean;
        "target"?: string;
        "text"?: string;
        "variant"?: Variants;
    }
    interface BxBreadcrumb {
        "breadcrumbs"?: Breadcrumb[] | string;
        /**
          * A click event for breadcrumb items
         */
        "onClicked"?: (event: CustomEvent<Breadcrumb>) => void;
        "separator"?: string;
    }
    interface BxButton {
        "active"?: boolean;
        "block"?: boolean;
        "disabled"?: boolean;
        "link"?: string;
        "outline"?: boolean;
        "size"?: Sizes;
        "target"?: string;
        "text"?: string;
        "variant"?: AdditionalVariants | Variants;
    }
    interface BxContainer {
    }
    interface BxDropdown {
        "buttonText"?: string;
        "direction"?: DropType;
        "isLink"?: boolean;
        "items"?: (DropdownItem | Divider)[] | string;
        "onClosed"?: (event: CustomEvent<void>) => void;
        "onClosing"?: (event: CustomEvent<void>) => void;
        "onOpened"?: (event: CustomEvent<void>) => void;
        "onOpening"?: (event: CustomEvent<void>) => void;
        "size"?: Sizes;
        "split"?: boolean;
        "textVariant"?: Variants;
        "variant"?: Variants;
    }
    interface BxSpinner {
        "grow"?: boolean;
        "small"?: boolean;
        "variant"?: Variants;
    }
    interface IntrinsicElements {
        "bx-alert": BxAlert;
        "bx-badge": BxBadge;
        "bx-breadcrumb": BxBreadcrumb;
        "bx-button": BxButton;
        "bx-container": BxContainer;
        "bx-dropdown": BxDropdown;
        "bx-spinner": BxSpinner;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "bx-alert": LocalJSX.BxAlert & JSXBase.HTMLAttributes<HTMLBxAlertElement>;
            "bx-badge": LocalJSX.BxBadge & JSXBase.HTMLAttributes<HTMLBxBadgeElement>;
            "bx-breadcrumb": LocalJSX.BxBreadcrumb & JSXBase.HTMLAttributes<HTMLBxBreadcrumbElement>;
            "bx-button": LocalJSX.BxButton & JSXBase.HTMLAttributes<HTMLBxButtonElement>;
            "bx-container": LocalJSX.BxContainer & JSXBase.HTMLAttributes<HTMLBxContainerElement>;
            "bx-dropdown": LocalJSX.BxDropdown & JSXBase.HTMLAttributes<HTMLBxDropdownElement>;
            "bx-spinner": LocalJSX.BxSpinner & JSXBase.HTMLAttributes<HTMLBxSpinnerElement>;
        }
    }
}
